"use client";
import { useState, useEffect } from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell
} from 'recharts';

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];

export default function CustomersDashboardAnalytics({ customersData, clientsData }) {
  const [stats, setStats] = useState({
    totalCustomers: 0,
    activeCustomers: 0,
    newCustomersThisMonth: 0,
    averagePurchaseValue: 0,
    customersByType: [],
    customersByStatus: [],
    purchasesTrend: [],
    topCustomers: []
  });

  useEffect(() => {
    if (!customersData?.length) return;

    // Calcular estatísticas
    const now = new Date();
    const thisMonth = now.getMonth();
    const thisYear = now.getFullYear();

    const customerStats = {
      totalCustomers: customersData.length,
      activeCustomers: customersData.filter(c => c.status === 'active').length,
      newCustomersThisMonth: customersData.filter(c => {
        const createdAt = new Date(c.createdAt);
        return createdAt.getMonth() === thisMonth && createdAt.getFullYear() === thisYear;
      }).length,
      customersByType: [],
      customersByStatus: [],
      purchasesTrend: [],
      topCustomers: []
    };

    // Agrupar por tipo
    const typeCount = {};
    customersData.forEach(customer => {
      const type = customer.type || 'Não especificado';
      typeCount[type] = (typeCount[type] || 0) + 1;
    });
    customerStats.customersByType = Object.entries(typeCount)
      .map(([name, value]) => ({ name, value }));

    // Agrupar por status
    const statusCount = {};
    customersData.forEach(customer => {
      const status = customer.status || 'inactive';
      statusCount[status] = (statusCount[status] || 0) + 1;
    });
    customerStats.customersByStatus = Object.entries(statusCount)
      .map(([name, value]) => ({ name, value }));

    // Calcular tendência de compras (últimos 6 meses)
    if (clientsData?.length) {
      const monthlyPurchases = {};
      clientsData.forEach(purchase => {
        const date = new Date(purchase.createdAt);
        const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
        if (!monthlyPurchases[monthKey]) {
          monthlyPurchases[monthKey] = {
            month: monthKey,
            total: 0,
            count: 0
          };
        }
        monthlyPurchases[monthKey].total += purchase.totalAfterDiscount || purchase.total || 0;
        monthlyPurchases[monthKey].count += 1;
      });

      customerStats.purchasesTrend = Object.values(monthlyPurchases)
        .sort((a, b) => a.month.localeCompare(b.month))
        .slice(-6);
      
      // Calcular média de valor de compra
      const totalPurchases = clientsData.reduce((sum, p) => sum + (p.totalAfterDiscount || p.total || 0), 0);
      customerStats.averagePurchaseValue = totalPurchases / clientsData.length;

      // Top clientes por valor total de compras
      const customerPurchases = {};
      clientsData.forEach(purchase => {
        const customerId = purchase.customerId || purchase.customerName;
        if (!customerPurchases[customerId]) {
          customerPurchases[customerId] = {
            name: purchase.customerName || 'Não identificado',
            value: 0
          };
        }
        customerPurchases[customerId].value += purchase.totalAfterDiscount || purchase.total || 0;
      });

      customerStats.topCustomers = Object.values(customerPurchases)
        .sort((a, b) => b.value - a.value)
        .slice(0, 5);
    }

    setStats(customerStats);
  }, [customersData, clientsData]);

  return (
    <div className="space-y-8">
      {/* Cards de KPIs */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold text-gray-700">Total de Clientes</h3>
          <p className="text-3xl font-bold text-indigo-600">{stats.totalCustomers}</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold text-gray-700">Clientes Ativos</h3>
          <p className="text-3xl font-bold text-green-600">{stats.activeCustomers}</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold text-gray-700">Novos Clientes (Mês)</h3>
          <p className="text-3xl font-bold text-blue-600">{stats.newCustomersThisMonth}</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold text-gray-700">Média de Compras</h3>
          <p className="text-3xl font-bold text-purple-600">
            {stats.averagePurchaseValue.toLocaleString('pt-MZ', {
              style: 'currency',
              currency: 'MZN'
            })}
          </p>
        </div>
      </div>

      {/* Gráficos */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Distribuição por Tipo */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold text-gray-700 mb-4">Clientes por Tipo</h3>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={stats.customersByType}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  outerRadius={100}
                  fill="#8884d8"
                  dataKey="value"
                  label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}
                >
                  {stats.customersByType.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Tendência de Compras */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold text-gray-700 mb-4">Tendência de Compras</h3>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={stats.purchasesTrend}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="month" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Line
                  type="monotone"
                  dataKey="total"
                  stroke="#8884d8"
                  name="Valor Total"
                  strokeWidth={2}
                />
                <Line
                  type="monotone"
                  dataKey="count"
                  stroke="#82ca9d"
                  name="Número de Compras"
                  strokeWidth={2}
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Top Clientes */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold text-gray-700 mb-4">Top 5 Clientes</h3>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={stats.topCustomers}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="value" fill="#8884d8" name="Valor Total" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Status dos Clientes */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold text-gray-700 mb-4">Status dos Clientes</h3>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={stats.customersByStatus}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  outerRadius={100}
                  fill="#8884d8"
                  dataKey="value"
                  label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}
                >
                  {stats.customersByStatus.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>
    </div>
  );
}
